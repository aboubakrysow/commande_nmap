// common.h
#ifndef COMMON_H
#define COMMON_H

#define PORT 8080
#define ADDRESS "127.0.0.1"

#endif // COMMON_H

// serveur.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include "common.h"

int main() {
    int server_fd, client_sock;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_len = sizeof(client_addr);
    int counter = 0;

    // Create socket
    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd == -1) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    // Bind socket
    if (bind(server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    // Listen for connections
    if (listen(server_fd, 1) < 0) {
        perror("Listen failed");
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d...\n", PORT);

    // Accept a client connection
    client_sock = accept(server_fd, (struct sockaddr *)&client_addr, &addr_len);
    if (client_sock < 0) {
        perror("Accept failed");
        exit(EXIT_FAILURE);
    }

    printf("Client connected.\n");

    while (1) {
        // Send counter to client
        if (write(client_sock, &counter, sizeof(counter)) <= 0) {
            perror("Write failed");
            break;
        }

        // Receive counter from client
        if (read(client_sock, &counter, sizeof(counter)) <= 0) {
            perror("Read failed");
            break;
        }

        printf("Counter updated by client: %d\n", counter);

        // Increment counter
        counter++;
        sleep(1);
    }

    close(client_sock);
    close(server_fd);
    return 0;
}

// client.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include "common.h"

int main() {
    int sock;
    struct sockaddr_in server_addr;
    int counter;

    // Create socket
    sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    if (inet_pton(AF_INET, ADDRESS, &server_addr.sin_addr) <= 0) {
        perror("Invalid address");
        exit(EXIT_FAILURE);
    }

    // Connect to server
    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection failed");
        exit(EXIT_FAILURE);
    }

    printf("Connected to server.\n");

    while (1) {
        // Receive counter from server
        if (read(sock, &counter, sizeof(counter)) <= 0) {
            perror("Read failed");
            break;
        }

        printf("Counter received from server: %d\n", counter);

        // Increment counter
        counter++;
        sleep(1);

        // Send counter to server
        if (write(sock, &counter, sizeof(counter)) <= 0) {
            perror("Write failed");
            break;
        }
    }

    close(sock);
    return 0;
}
